#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct node {
    int data;
    struct node* left;
    struct node* right;
    int height;
};

int getHeight(struct node* n) {
    if (n == NULL) {
        return 0;
    }
    return n->height;
}

struct node* createNode(int data) {
    struct node* new = (struct node*)malloc(sizeof(struct node));
    new->data = data;
    new->left = NULL;
    new->right = NULL;
    new->height = 1; 
    return new;
}

int max(int a, int b) {
    return (a > b) ? a : b;
}

int getBalanceFactor(struct node* node) {
    if (node == NULL) {
        return 0;
    }
    return getHeight(node->left) - getHeight(node->right);
}

// Right rotation (LL case)
struct node* rightRotate(struct node* y) {
    struct node* x = y->left;
    struct node* t2 = x->right;

    x->right = y;
    y->left = t2;

    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
    
    return x;
}

// Left rotation (RR case)
struct node* leftRotate(struct node* x) {
    struct node* y = x->right;
    struct node* t2 = y->left;

    y->left = x;
    x->right = t2;

    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
    
    return y;
}

struct node* insert(struct node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    } else {
        return root;
    }

    root->height = max(getHeight(root->left), getHeight(root->right)) + 1;

    int bf = getBalanceFactor(root);
    printf("Balance Factor: %d\n",bf);

    // LL case
    if (bf > 1 && data < root->left->data) {
        printf("Performing Right Rotation (LL)\n");
        return rightRotate(root);
    }
    // RR case
    if (bf < -1 && data > root->right->data) {
        printf("Performing Left Rotation (RR)\n");
        return leftRotate(root);
    }
    // LR case
    if (bf > 1 && data > root->left->data) {
        printf("Performing Left-Right Rotation (LR)\n");
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    // RL case
    if (bf < -1 && data < root->right->data) {
        printf("Performing Right-Left Rotation (RL)\n");
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    
    return root;
}

struct node* minValueNode(struct node* node) {
    struct node* current = node;
    while (current->left != NULL) {
        current = current->left;
    }
    return current;
}

struct node* deleteNode(struct node* root, int data) {
    if (root == NULL) {
        return root;
    }
    
    if (data < root->data) {
        root->left = deleteNode(root->left, data);
    } else if (data > root->data) {
        root->right = deleteNode(root->right, data);
    } else {
        if ((root->left == NULL) || (root->right == NULL)) {
            struct node* temp = root->left ? root->left : root->right;
            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else {
                *root = *temp; 
            }
            free(temp);
        } else {
            struct node* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data);
        }
    }

    if (root == NULL) {
        return root;
    }

    root->height = max(getHeight(root->left), getHeight(root->right)) + 1;
    int bf = getBalanceFactor(root);
    printf("Balance Factor: %d\n",bf);
    // LL case
    if (bf > 1 && getBalanceFactor(root->left) >= 0) {
        printf("Performing Right Rotation (LL) during deletion\n");
        return rightRotate(root);
    }
    // LR case
    if (bf > 1 && getBalanceFactor(root->left) < 0) {
        printf("Performing Left-Right Rotation (LR) during deletion\n");
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    // RR case
    if (bf < -1 && getBalanceFactor(root->right) <= 0) {
        printf("Performing Left Rotation (RR) during deletion\n");
        return leftRotate(root);
    }
    // RL case
    if (bf < -1 && getBalanceFactor(root->right) > 0) {
        printf("Performing Right-Left Rotation (RL) during deletion\n");
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    
    return root;
}

void inorder(struct node* root) {
    if (root == NULL) {
        return;
    }
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

int main() {
    struct node* root = NULL;
    printf("Enter -1 to STOP \n");
    int data;
    while(true){
        printf("Insert Node: ");
        printf("\n");
        scanf("%d",&data);
        if(data == -1)
            break;
        root = insert(root,data);
    }
    
    printf("Inorder traversal after insertion:\n");
    inorder(root);
    
    int del;
    while(true){
        printf("\nEnter node to be Deleted: ");
        printf("\n");
        scanf("%d",&del);
        if(del == -1)
            break;
        root = deleteNode(root, del);
    }
    
    printf("Inorder traversal after deletion:\n");
    inorder(root);

    return 0;
}
