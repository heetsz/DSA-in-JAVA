#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#define capacity 100

struct stack {
    int top;
    char arr[capacity];
};

struct stack* createStack() {
    struct stack* stack = (struct stack*)malloc(sizeof(struct stack));
    stack->top = -1;
    return stack;
}

bool isFull(struct stack* s) {
    return s->top == capacity - 1;
}

bool isEmpty(struct stack* s) {
    return s->top == -1;
}

void push(struct stack* s, char ch) {
    if (isFull(s)) {
        printf("Stack is full\n");
        return;
    }
    s->arr[++(s->top)] = ch; 
    printf("%c pushed in stack\n", ch);
}

char pop(struct stack* s) {
    if (isEmpty(s)) {
        printf("Stack is empty\n");
        return ' '; 
    }
    return s->arr[(s->top)--]; 
}

int pres(char ch) {
    if (ch == '^')
        return 3;
    if (ch == '*' || ch == '/')
        return 2;
    if (ch == '+' || ch == '-')
        return 1;
    return 0; 
}

int main() {
    struct stack* s = createStack();
    char infix[100];
    char res[100];
    int ri = 0;
    printf("Enter infix: ");
    scanf("%s", infix);

    for (int i = 0; i < strlen(infix); i++) {
        if (infix[i] == '(') {
            push(s, infix[i]);
        } else if (infix[i] >= 'a' && infix[i] <= 'z') {
            res[ri++] = infix[i];
        } else if (infix[i] == '+' || infix[i] == '-' || infix[i] == '/' || infix[i] == '*') {
            while (!isEmpty(s) && pres(s->arr[s->top]) >= pres(infix[i])) {
                res[ri++] = pop(s);
            }
            push(s, infix[i]); 
        } else if (infix[i] == ')') {
            while (!isEmpty(s) && s->arr[s->top] != '(') {
                res[ri++] = pop(s);
            }
            pop(s);
        }
    }

    while (!isEmpty(s)) {
        res[ri++] = pop(s);
    }

    res[ri] = '\0';
    printf("Postfix: %s\n", res);
    
    return 0;
}
